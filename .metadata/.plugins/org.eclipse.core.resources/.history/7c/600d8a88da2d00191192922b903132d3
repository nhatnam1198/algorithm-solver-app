import java.io.*;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class AlgorithmSolveApp {
	private Process[] processes;
	private int quantum;
	private BufferedReader in;
	public void readTextFile() throws Exception {
		File textFile = new File("input.txt");
		in = new BufferedReader(new FileReader(textFile));
		String st;
		st = in.readLine();
		int soTienTrinh = Integer.parseInt(st); // so process
		processes = new Process[6];      //cap phat bo nho
		for(int i=0; i< processes.length; i++) {
			processes[i] = new Process();
		}
		for (int i = 0; i < soTienTrinh; i++) {
			st = in.readLine();
			setDataEachProcess(processes, st, i, "^\\d+");
			//setDataEachProcess(process[i].burstTime, st, i, "\\d+$");
		}
		
		String getLastLine = "";
		while ((st = in.readLine()) != null) 
		   {
		        getLastLine = st;
		    }
		setQuantum(getLastLine);
	}
	
	private void setDataEachProcess(Process[] processes, String st, int i, String regex) {
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(st);
		while(matcher.find()) {
			System.out.print(Integer.parseInt(matcher.group()));
			processes[i].setArrivalTime(Integer.parseInt(matcher.group()));
			System.out.print(processes[i].getArrivalTime());
		}
		/*pattern = Pattern.compile(regex2);
		matcher = pattern.matcher(st);
		while(matcher.find()) {
			processes[i].setBurstTime(Integer.parseInt(matcher.group()));
		}*/	
	}
	
	private void setQuantum(String quantumString) {
		quantum = Integer.parseInt(quantumString);
	}
	
	public void displayInfo() {
		System.out.printf("Process    Order" + "     Arrival time" + "     Duration\n"); 
		for (int i = 0; i < processes.length; i++) {
			System.out.println("P" + (i+1)+"          " +(i+1) + "         " + processes[i].getArrivalTime()  + "               "+ processes[i].getBurstTime());
		}
	}
	
	public void run() throws Exception {
		readTextFile();
		displayInfo();
		//FirstComeFirstServe FCFS = new FirstComeFirstServe(arrivalTime, burstTime);
		//FCFS.display();
		//ShortestJobFirst SJF = new ShortestJobFirst(arrivalTime, burstTime);
		//SJF.display();
		/*
		RoundRobin RR = new RoundRobin(arrivalTime, burstTime, processes, quantum);
		RR.display();*/
	}
}
